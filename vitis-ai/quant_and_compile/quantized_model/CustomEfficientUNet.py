# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class CustomEfficientUNet(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(CustomEfficientUNet, self).__init__()
        self.module_0 = py_nndct.nn.Input() #CustomEfficientUNet::input_0(CustomEfficientUNet::nndct_input_0)
        self.module_1 = py_nndct.nn.Conv2d(in_channels=1, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc1]/Conv2d[proj]/ret.3(CustomEfficientUNet::nndct_conv2d_1)
        self.module_2 = py_nndct.nn.Conv2d(in_channels=1, out_channels=1, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc1]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[depthwise]/ret.5(CustomEfficientUNet::nndct_conv2d_2)
        self.module_3 = py_nndct.nn.Conv2d(in_channels=1, out_channels=8, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc1]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[pointwise]/ret.7(CustomEfficientUNet::nndct_conv2d_3)
        self.module_4 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc1]/Sequential[conv]/DepthwiseSeparableConv[0]/LeakyReLU[act]/7248(CustomEfficientUNet::nndct_leaky_relu_4)
        self.module_5 = py_nndct.nn.Conv2d(in_channels=8, out_channels=8, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=8, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc1]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[depthwise]/ret.11(CustomEfficientUNet::nndct_depthwise_conv2d_5)
        self.module_6 = py_nndct.nn.Conv2d(in_channels=8, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc1]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[pointwise]/ret.13(CustomEfficientUNet::nndct_conv2d_6)
        self.module_7 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc1]/Sequential[conv]/DepthwiseSeparableConv[1]/LeakyReLU[act]/7298(CustomEfficientUNet::nndct_leaky_relu_7)
        self.module_8 = py_nndct.nn.Add() #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc1]/ret.17(CustomEfficientUNet::nndct_elemwise_add_8)
        self.module_9 = py_nndct.nn.MaxPool2d(kernel_size=[2, 2], stride=[2, 2], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #CustomEfficientUNet::CustomEfficientUNet/MaxPool2d[pool1]/7317(CustomEfficientUNet::nndct_maxpool_9)
        self.module_10 = py_nndct.nn.Conv2d(in_channels=16, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc2]/Conv2d[proj]/ret.19(CustomEfficientUNet::nndct_conv2d_10)
        self.module_11 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=16, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc2]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[depthwise]/ret.21(CustomEfficientUNet::nndct_depthwise_conv2d_11)
        self.module_12 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc2]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[pointwise]/ret.23(CustomEfficientUNet::nndct_conv2d_12)
        self.module_13 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc2]/Sequential[conv]/DepthwiseSeparableConv[0]/LeakyReLU[act]/7388(CustomEfficientUNet::nndct_leaky_relu_13)
        self.module_14 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=16, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc2]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[depthwise]/ret.27(CustomEfficientUNet::nndct_depthwise_conv2d_14)
        self.module_15 = py_nndct.nn.Conv2d(in_channels=16, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc2]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[pointwise]/ret.29(CustomEfficientUNet::nndct_conv2d_15)
        self.module_16 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc2]/Sequential[conv]/DepthwiseSeparableConv[1]/LeakyReLU[act]/7438(CustomEfficientUNet::nndct_leaky_relu_16)
        self.module_17 = py_nndct.nn.Add() #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc2]/ret.33(CustomEfficientUNet::nndct_elemwise_add_17)
        self.module_18 = py_nndct.nn.MaxPool2d(kernel_size=[2, 2], stride=[2, 2], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #CustomEfficientUNet::CustomEfficientUNet/MaxPool2d[pool2]/7457(CustomEfficientUNet::nndct_maxpool_18)
        self.module_19 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc3]/Conv2d[proj]/ret.35(CustomEfficientUNet::nndct_conv2d_19)
        self.module_20 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=32, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc3]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[depthwise]/ret.37(CustomEfficientUNet::nndct_depthwise_conv2d_20)
        self.module_21 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc3]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[pointwise]/ret.39(CustomEfficientUNet::nndct_conv2d_21)
        self.module_22 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc3]/Sequential[conv]/DepthwiseSeparableConv[0]/LeakyReLU[act]/7528(CustomEfficientUNet::nndct_leaky_relu_22)
        self.module_23 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=32, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc3]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[depthwise]/ret.43(CustomEfficientUNet::nndct_depthwise_conv2d_23)
        self.module_24 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc3]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[pointwise]/ret.45(CustomEfficientUNet::nndct_conv2d_24)
        self.module_25 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc3]/Sequential[conv]/DepthwiseSeparableConv[1]/LeakyReLU[act]/7578(CustomEfficientUNet::nndct_leaky_relu_25)
        self.module_26 = py_nndct.nn.Add() #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc3]/ret.49(CustomEfficientUNet::nndct_elemwise_add_26)
        self.module_27 = py_nndct.nn.MaxPool2d(kernel_size=[2, 2], stride=[2, 2], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #CustomEfficientUNet::CustomEfficientUNet/MaxPool2d[pool3]/7597(CustomEfficientUNet::nndct_maxpool_27)
        self.module_28 = py_nndct.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc4]/Conv2d[proj]/ret.51(CustomEfficientUNet::nndct_conv2d_28)
        self.module_29 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=64, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc4]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[depthwise]/ret.53(CustomEfficientUNet::nndct_depthwise_conv2d_29)
        self.module_30 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc4]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[pointwise]/ret.55(CustomEfficientUNet::nndct_conv2d_30)
        self.module_31 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc4]/Sequential[conv]/DepthwiseSeparableConv[0]/LeakyReLU[act]/7668(CustomEfficientUNet::nndct_leaky_relu_31)
        self.module_32 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=64, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc4]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[depthwise]/ret.59(CustomEfficientUNet::nndct_depthwise_conv2d_32)
        self.module_33 = py_nndct.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc4]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[pointwise]/ret.61(CustomEfficientUNet::nndct_conv2d_33)
        self.module_34 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc4]/Sequential[conv]/DepthwiseSeparableConv[1]/LeakyReLU[act]/7718(CustomEfficientUNet::nndct_leaky_relu_34)
        self.module_35 = py_nndct.nn.Add() #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[enc4]/ret.65(CustomEfficientUNet::nndct_elemwise_add_35)
        self.module_36 = py_nndct.nn.MaxPool2d(kernel_size=[2, 2], stride=[2, 2], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #CustomEfficientUNet::CustomEfficientUNet/MaxPool2d[pool4]/7737(CustomEfficientUNet::nndct_maxpool_36)
        self.module_37 = py_nndct.nn.Conv2d(in_channels=128, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[2, 2], dilation=[2, 2], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[bottleneck]/Conv2d[0]/ret.67(CustomEfficientUNet::nndct_conv2d_37)
        self.module_38 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[bottleneck]/LeakyReLU[2]/7766(CustomEfficientUNet::nndct_leaky_relu_38)
        self.module_39 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[2, 2], dilation=[2, 2], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[bottleneck]/Conv2d[3]/ret.71(CustomEfficientUNet::nndct_conv2d_39)
        self.module_40 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[bottleneck]/LeakyReLU[5]/7794(CustomEfficientUNet::nndct_leaky_relu_40)
        self.module_41 = py_nndct.nn.Interpolate() #CustomEfficientUNet::CustomEfficientUNet/Sequential[up4]/Upsample[0]/ret.75(CustomEfficientUNet::nndct_resize_41)
        self.module_42 = py_nndct.nn.Conv2d(in_channels=256, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[up4]/Conv2d[1]/ret.77(CustomEfficientUNet::nndct_conv2d_42)
        self.module_43 = py_nndct.nn.Cat() #CustomEfficientUNet::CustomEfficientUNet/ret.79(CustomEfficientUNet::nndct_concat_43)
        self.module_44 = py_nndct.nn.Conv2d(in_channels=192, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec4]/Conv2d[proj]/ret.81(CustomEfficientUNet::nndct_conv2d_44)
        self.module_45 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=192, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec4]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[depthwise]/ret.83(CustomEfficientUNet::nndct_depthwise_conv2d_45)
        self.module_46 = py_nndct.nn.Conv2d(in_channels=192, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec4]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[pointwise]/ret.85(CustomEfficientUNet::nndct_conv2d_46)
        self.module_47 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec4]/Sequential[conv]/DepthwiseSeparableConv[0]/LeakyReLU[act]/7895(CustomEfficientUNet::nndct_leaky_relu_47)
        self.module_48 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=32, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec4]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[depthwise]/ret.89(CustomEfficientUNet::nndct_depthwise_conv2d_48)
        self.module_49 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec4]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[pointwise]/ret.91(CustomEfficientUNet::nndct_conv2d_49)
        self.module_50 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec4]/Sequential[conv]/DepthwiseSeparableConv[1]/LeakyReLU[act]/7945(CustomEfficientUNet::nndct_leaky_relu_50)
        self.module_51 = py_nndct.nn.Add() #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec4]/ret.95(CustomEfficientUNet::nndct_elemwise_add_51)
        self.module_52 = py_nndct.nn.Interpolate() #CustomEfficientUNet::CustomEfficientUNet/Sequential[up3]/Upsample[0]/ret.97(CustomEfficientUNet::nndct_resize_52)
        self.module_53 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[up3]/Conv2d[1]/ret.99(CustomEfficientUNet::nndct_conv2d_53)
        self.module_54 = py_nndct.nn.Cat() #CustomEfficientUNet::CustomEfficientUNet/ret.101(CustomEfficientUNet::nndct_concat_54)
        self.module_55 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec3]/Conv2d[proj]/ret.103(CustomEfficientUNet::nndct_conv2d_55)
        self.module_56 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=96, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec3]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[depthwise]/ret.105(CustomEfficientUNet::nndct_depthwise_conv2d_56)
        self.module_57 = py_nndct.nn.Conv2d(in_channels=96, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec3]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[pointwise]/ret.107(CustomEfficientUNet::nndct_conv2d_57)
        self.module_58 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec3]/Sequential[conv]/DepthwiseSeparableConv[0]/LeakyReLU[act]/8050(CustomEfficientUNet::nndct_leaky_relu_58)
        self.module_59 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=16, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec3]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[depthwise]/ret.111(CustomEfficientUNet::nndct_depthwise_conv2d_59)
        self.module_60 = py_nndct.nn.Conv2d(in_channels=16, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec3]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[pointwise]/ret.113(CustomEfficientUNet::nndct_conv2d_60)
        self.module_61 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec3]/Sequential[conv]/DepthwiseSeparableConv[1]/LeakyReLU[act]/8100(CustomEfficientUNet::nndct_leaky_relu_61)
        self.module_62 = py_nndct.nn.Add() #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec3]/ret.117(CustomEfficientUNet::nndct_elemwise_add_62)
        self.module_63 = py_nndct.nn.Interpolate() #CustomEfficientUNet::CustomEfficientUNet/Sequential[up2]/Upsample[0]/ret.119(CustomEfficientUNet::nndct_resize_63)
        self.module_64 = py_nndct.nn.Conv2d(in_channels=32, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[up2]/Conv2d[1]/ret.121(CustomEfficientUNet::nndct_conv2d_64)
        self.module_65 = py_nndct.nn.Cat() #CustomEfficientUNet::CustomEfficientUNet/ret.123(CustomEfficientUNet::nndct_concat_65)
        self.module_66 = py_nndct.nn.Conv2d(in_channels=48, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec2]/Conv2d[proj]/ret.125(CustomEfficientUNet::nndct_conv2d_66)
        self.module_67 = py_nndct.nn.Conv2d(in_channels=48, out_channels=48, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=48, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec2]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[depthwise]/ret.127(CustomEfficientUNet::nndct_depthwise_conv2d_67)
        self.module_68 = py_nndct.nn.Conv2d(in_channels=48, out_channels=8, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec2]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[pointwise]/ret.129(CustomEfficientUNet::nndct_conv2d_68)
        self.module_69 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec2]/Sequential[conv]/DepthwiseSeparableConv[0]/LeakyReLU[act]/8205(CustomEfficientUNet::nndct_leaky_relu_69)
        self.module_70 = py_nndct.nn.Conv2d(in_channels=8, out_channels=8, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=8, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec2]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[depthwise]/ret.133(CustomEfficientUNet::nndct_depthwise_conv2d_70)
        self.module_71 = py_nndct.nn.Conv2d(in_channels=8, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec2]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[pointwise]/ret.135(CustomEfficientUNet::nndct_conv2d_71)
        self.module_72 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec2]/Sequential[conv]/DepthwiseSeparableConv[1]/LeakyReLU[act]/8255(CustomEfficientUNet::nndct_leaky_relu_72)
        self.module_73 = py_nndct.nn.Add() #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec2]/ret.139(CustomEfficientUNet::nndct_elemwise_add_73)
        self.module_74 = py_nndct.nn.Interpolate() #CustomEfficientUNet::CustomEfficientUNet/Sequential[up1]/Upsample[0]/ret.141(CustomEfficientUNet::nndct_resize_74)
        self.module_75 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[up1]/Conv2d[1]/ret.143(CustomEfficientUNet::nndct_conv2d_75)
        self.module_76 = py_nndct.nn.Cat() #CustomEfficientUNet::CustomEfficientUNet/ret.145(CustomEfficientUNet::nndct_concat_76)
        self.module_77 = py_nndct.nn.Conv2d(in_channels=32, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec1]/Conv2d[proj]/ret.147(CustomEfficientUNet::nndct_conv2d_77)
        self.module_78 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=32, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec1]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[depthwise]/ret.149(CustomEfficientUNet::nndct_depthwise_conv2d_78)
        self.module_79 = py_nndct.nn.Conv2d(in_channels=32, out_channels=8, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec1]/Sequential[conv]/DepthwiseSeparableConv[0]/Conv2d[pointwise]/ret.151(CustomEfficientUNet::nndct_conv2d_79)
        self.module_80 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec1]/Sequential[conv]/DepthwiseSeparableConv[0]/LeakyReLU[act]/8360(CustomEfficientUNet::nndct_leaky_relu_80)
        self.module_81 = py_nndct.nn.Conv2d(in_channels=8, out_channels=8, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=8, bias=False) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec1]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[depthwise]/ret.155(CustomEfficientUNet::nndct_depthwise_conv2d_81)
        self.module_82 = py_nndct.nn.Conv2d(in_channels=8, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec1]/Sequential[conv]/DepthwiseSeparableConv[1]/Conv2d[pointwise]/ret.157(CustomEfficientUNet::nndct_conv2d_82)
        self.module_83 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec1]/Sequential[conv]/DepthwiseSeparableConv[1]/LeakyReLU[act]/8410(CustomEfficientUNet::nndct_leaky_relu_83)
        self.module_84 = py_nndct.nn.Add() #CustomEfficientUNet::CustomEfficientUNet/ResidualSeparableBottleneckBlock[dec1]/ret.161(CustomEfficientUNet::nndct_elemwise_add_84)
        self.module_85 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[sharpen]/Conv2d[0]/ret.163(CustomEfficientUNet::nndct_conv2d_85)
        self.module_86 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #CustomEfficientUNet::CustomEfficientUNet/Sequential[sharpen]/LeakyReLU[1]/8436(CustomEfficientUNet::nndct_leaky_relu_86)
        self.module_87 = py_nndct.nn.Conv2d(in_channels=16, out_channels=1, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CustomEfficientUNet::CustomEfficientUNet/Conv2d[final]/ret(CustomEfficientUNet::nndct_conv2d_87)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_1 = self.module_1(output_module_0)
        output_module_2 = self.module_2(output_module_0)
        output_module_2 = self.module_3(output_module_2)
        output_module_2 = self.module_4(output_module_2)
        output_module_2 = self.module_5(output_module_2)
        output_module_2 = self.module_6(output_module_2)
        output_module_2 = self.module_7(output_module_2)
        output_module_2 = self.module_8(input=output_module_2, other=output_module_1, alpha=1)
        output_module_9 = self.module_9(output_module_2)
        output_module_10 = self.module_10(output_module_9)
        output_module_11 = self.module_11(output_module_9)
        output_module_11 = self.module_12(output_module_11)
        output_module_11 = self.module_13(output_module_11)
        output_module_11 = self.module_14(output_module_11)
        output_module_11 = self.module_15(output_module_11)
        output_module_11 = self.module_16(output_module_11)
        output_module_11 = self.module_17(input=output_module_11, other=output_module_10, alpha=1)
        output_module_18 = self.module_18(output_module_11)
        output_module_19 = self.module_19(output_module_18)
        output_module_20 = self.module_20(output_module_18)
        output_module_20 = self.module_21(output_module_20)
        output_module_20 = self.module_22(output_module_20)
        output_module_20 = self.module_23(output_module_20)
        output_module_20 = self.module_24(output_module_20)
        output_module_20 = self.module_25(output_module_20)
        output_module_20 = self.module_26(input=output_module_20, other=output_module_19, alpha=1)
        output_module_27 = self.module_27(output_module_20)
        output_module_28 = self.module_28(output_module_27)
        output_module_29 = self.module_29(output_module_27)
        output_module_29 = self.module_30(output_module_29)
        output_module_29 = self.module_31(output_module_29)
        output_module_29 = self.module_32(output_module_29)
        output_module_29 = self.module_33(output_module_29)
        output_module_29 = self.module_34(output_module_29)
        output_module_29 = self.module_35(input=output_module_29, other=output_module_28, alpha=1)
        output_module_36 = self.module_36(output_module_29)
        output_module_36 = self.module_37(output_module_36)
        output_module_36 = self.module_38(output_module_36)
        output_module_36 = self.module_39(output_module_36)
        output_module_36 = self.module_40(output_module_36)
        output_module_36 = self.module_41(input=output_module_36, size=None, scale_factor=[2.0,2.0], mode='bilinear', align_corners=False)
        output_module_36 = self.module_42(output_module_36)
        output_module_36 = self.module_43(dim=1, tensors=[output_module_36,output_module_29])
        output_module_44 = self.module_44(output_module_36)
        output_module_45 = self.module_45(output_module_36)
        output_module_45 = self.module_46(output_module_45)
        output_module_45 = self.module_47(output_module_45)
        output_module_45 = self.module_48(output_module_45)
        output_module_45 = self.module_49(output_module_45)
        output_module_45 = self.module_50(output_module_45)
        output_module_45 = self.module_51(input=output_module_45, other=output_module_44, alpha=1)
        output_module_45 = self.module_52(input=output_module_45, size=None, scale_factor=[2.0,2.0], mode='bilinear', align_corners=False)
        output_module_45 = self.module_53(output_module_45)
        output_module_45 = self.module_54(dim=1, tensors=[output_module_45,output_module_20])
        output_module_55 = self.module_55(output_module_45)
        output_module_56 = self.module_56(output_module_45)
        output_module_56 = self.module_57(output_module_56)
        output_module_56 = self.module_58(output_module_56)
        output_module_56 = self.module_59(output_module_56)
        output_module_56 = self.module_60(output_module_56)
        output_module_56 = self.module_61(output_module_56)
        output_module_56 = self.module_62(input=output_module_56, other=output_module_55, alpha=1)
        output_module_56 = self.module_63(input=output_module_56, size=None, scale_factor=[2.0,2.0], mode='bilinear', align_corners=False)
        output_module_56 = self.module_64(output_module_56)
        output_module_56 = self.module_65(dim=1, tensors=[output_module_56,output_module_11])
        output_module_66 = self.module_66(output_module_56)
        output_module_67 = self.module_67(output_module_56)
        output_module_67 = self.module_68(output_module_67)
        output_module_67 = self.module_69(output_module_67)
        output_module_67 = self.module_70(output_module_67)
        output_module_67 = self.module_71(output_module_67)
        output_module_67 = self.module_72(output_module_67)
        output_module_67 = self.module_73(input=output_module_67, other=output_module_66, alpha=1)
        output_module_67 = self.module_74(input=output_module_67, size=None, scale_factor=[2.0,2.0], mode='bilinear', align_corners=False)
        output_module_67 = self.module_75(output_module_67)
        output_module_67 = self.module_76(dim=1, tensors=[output_module_67,output_module_2])
        output_module_77 = self.module_77(output_module_67)
        output_module_78 = self.module_78(output_module_67)
        output_module_78 = self.module_79(output_module_78)
        output_module_78 = self.module_80(output_module_78)
        output_module_78 = self.module_81(output_module_78)
        output_module_78 = self.module_82(output_module_78)
        output_module_78 = self.module_83(output_module_78)
        output_module_78 = self.module_84(input=output_module_78, other=output_module_77, alpha=1)
        output_module_78 = self.module_85(output_module_78)
        output_module_78 = self.module_86(output_module_78)
        output_module_78 = self.module_87(output_module_78)
        return output_module_78
